# PROJECT PORTFOLIO

## Project 1: Provider-Agnostic LLM Eval & Reliability Toolkit (Cove.ai)
**Technologies:** Python, OpenAI/Anthropic APIs, JSON schema validation, Playwright, LangSmith/Langfuse, GitHub Actions  
**Duration:** Summer 2024  
**Key Achievements:**
- Built commit-time prompt/eval harness that flagged regressions across multiple model providers
- Improved structured-output reliability with schema-checked function calling and guardrails
- Added end-to-end UI tests for agent flows to prevent silent breakages in production
- Documented failure modes and playbooks to speed up debugging for PM/eng teams
**Technical Highlights:**
- Deterministic test fixtures for prompts and tools; golden-file comparisons
- Provider abstraction layer with fallback/timeout policies
- CI gates (GitHub Actions) integrating eval metrics and Playwright runs
- Telemetry hooks for latency/cost/quality tracking per prompt version

---

## Project 2: Automated Customer-Churn Workflow (Adeptia)
**Technologies:** Python, MySQL, OpenAI function-calling, Retool, Audit logs  
**Duration:** Summer 2025  
**Key Achievements:**
- Deployed an explainable churn-risk pipeline with autogenerated analyst write-ups and audit trails
- Reduced manual review time by ~10 hours/week via structured outputs and triage queues
- Shipped a lightweight front end for case review and approvals
**Technical Highlights:**
- JSON schema enforcement with error-tolerant retries and observability
- Role-based access and action logging for compliance
- Batched inference with cost/latency controls and backoff strategies

---

## Project 3: “The Hub” — Company-Wide Internal Portal (Adeptia)
**Technologies:** Next.js (TypeScript), Sanity CMS, Vercel, GROQ, Design systems  
**Duration:** Summer 2025  
**Key Achievements:**
- Launched an employee portal (~300 users) enabling non-technical staff to self-serve content updates
- Designed modular case-study tiles, filters, and search; improved customer website retention by **24%**
- Added lightweight automations to keep docs fresh and discoverable
**Technical Highlights:**
- Schema-driven CMS with reusable content blocks and editorial workflows
- Incremental static regeneration and edge caching for fast loads
- GROQ queries and typed content models for safe rendering

---

## Project 4: AI-Driven DnD-Style Text Adventure Engine
**Technologies:** Python, multi-agent orchestration (conversation/combat/environment), rules-based gating, OpenAI APIs  
**Duration:** Ongoing  
**Key Achievements:**
- Built a mixed “mixture-of-experts” style agent system for narrative, combat, and world state
- Added tool-use and validation layers to keep story state consistent
- Authored prompts and safety rails to reduce contradictions and dead-ends
**Technical Highlights:**
- State machine + memory store for entities, locations, and quests
- Turn loop with deterministic checks and rollback on invalid actions
- Pluggable content packs and evaluator for narrative coherence

---

## Project 5: NES-Inspired Zelda Game (EECS 494)
**Technologies:** Unity, C#, Unity Input System, EventBus pattern  
**Duration:** Semester project  
**Key Achievements:**
- Delivered P1 Classic Game and P2 Gold Spike prototypes with responsive controls and core mechanics
- Implemented platformer nuances (ground detection, coyote-jump, animation states)
- Built reusable game architecture for rapid iteration
**Technical Highlights:**
- EventBus-based decoupling of gameplay systems (combat, UI, audio)
- ScriptableObject configs for enemies/items; deterministic collision handling
- Editor tooling for level authoring and quick playtesting

---

## Project 6: Search Engine — Index & Query (EECS 485, Project 5)
**Technologies:** MapReduce-style pipeline, Python/Go (varies), REST Index server, Web search UI  
**Duration:** Semester project  
**Key Achievements:**
- Implemented inverted-index build pipeline and a query server with ranked retrieval
- Exposed REST API to a search frontend for multi-term queries
- Validated correctness and performance with unit/integration tests
**Technical Highlights:**
- Tokenization, normalization, and postings compression
- Query processing (boolean/TF-IDF or BM25 variant, per course spec)
- Caching strategies and concurrency for low-latency responses